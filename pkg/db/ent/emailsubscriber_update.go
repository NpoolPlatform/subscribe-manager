// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/subscribe-manager/pkg/db/ent/emailsubscriber"
	"github.com/NpoolPlatform/subscribe-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// EmailSubscriberUpdate is the builder for updating EmailSubscriber entities.
type EmailSubscriberUpdate struct {
	config
	hooks    []Hook
	mutation *EmailSubscriberMutation
}

// Where appends a list predicates to the EmailSubscriberUpdate builder.
func (esu *EmailSubscriberUpdate) Where(ps ...predicate.EmailSubscriber) *EmailSubscriberUpdate {
	esu.mutation.Where(ps...)
	return esu
}

// SetCreatedAt sets the "created_at" field.
func (esu *EmailSubscriberUpdate) SetCreatedAt(u uint32) *EmailSubscriberUpdate {
	esu.mutation.ResetCreatedAt()
	esu.mutation.SetCreatedAt(u)
	return esu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (esu *EmailSubscriberUpdate) SetNillableCreatedAt(u *uint32) *EmailSubscriberUpdate {
	if u != nil {
		esu.SetCreatedAt(*u)
	}
	return esu
}

// AddCreatedAt adds u to the "created_at" field.
func (esu *EmailSubscriberUpdate) AddCreatedAt(u int32) *EmailSubscriberUpdate {
	esu.mutation.AddCreatedAt(u)
	return esu
}

// SetUpdatedAt sets the "updated_at" field.
func (esu *EmailSubscriberUpdate) SetUpdatedAt(u uint32) *EmailSubscriberUpdate {
	esu.mutation.ResetUpdatedAt()
	esu.mutation.SetUpdatedAt(u)
	return esu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (esu *EmailSubscriberUpdate) AddUpdatedAt(u int32) *EmailSubscriberUpdate {
	esu.mutation.AddUpdatedAt(u)
	return esu
}

// SetDeletedAt sets the "deleted_at" field.
func (esu *EmailSubscriberUpdate) SetDeletedAt(u uint32) *EmailSubscriberUpdate {
	esu.mutation.ResetDeletedAt()
	esu.mutation.SetDeletedAt(u)
	return esu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (esu *EmailSubscriberUpdate) SetNillableDeletedAt(u *uint32) *EmailSubscriberUpdate {
	if u != nil {
		esu.SetDeletedAt(*u)
	}
	return esu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (esu *EmailSubscriberUpdate) AddDeletedAt(u int32) *EmailSubscriberUpdate {
	esu.mutation.AddDeletedAt(u)
	return esu
}

// SetAppID sets the "app_id" field.
func (esu *EmailSubscriberUpdate) SetAppID(u uuid.UUID) *EmailSubscriberUpdate {
	esu.mutation.SetAppID(u)
	return esu
}

// SetEmailAddress sets the "email_address" field.
func (esu *EmailSubscriberUpdate) SetEmailAddress(s string) *EmailSubscriberUpdate {
	esu.mutation.SetEmailAddress(s)
	return esu
}

// Mutation returns the EmailSubscriberMutation object of the builder.
func (esu *EmailSubscriberUpdate) Mutation() *EmailSubscriberMutation {
	return esu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (esu *EmailSubscriberUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := esu.defaults(); err != nil {
		return 0, err
	}
	if len(esu.hooks) == 0 {
		affected, err = esu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailSubscriberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			esu.mutation = mutation
			affected, err = esu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(esu.hooks) - 1; i >= 0; i-- {
			if esu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = esu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, esu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (esu *EmailSubscriberUpdate) SaveX(ctx context.Context) int {
	affected, err := esu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (esu *EmailSubscriberUpdate) Exec(ctx context.Context) error {
	_, err := esu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esu *EmailSubscriberUpdate) ExecX(ctx context.Context) {
	if err := esu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esu *EmailSubscriberUpdate) defaults() error {
	if _, ok := esu.mutation.UpdatedAt(); !ok {
		if emailsubscriber.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized emailsubscriber.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := emailsubscriber.UpdateDefaultUpdatedAt()
		esu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (esu *EmailSubscriberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emailsubscriber.Table,
			Columns: emailsubscriber.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: emailsubscriber.FieldID,
			},
		},
	}
	if ps := esu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: emailsubscriber.FieldCreatedAt,
		})
	}
	if value, ok := esu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: emailsubscriber.FieldCreatedAt,
		})
	}
	if value, ok := esu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: emailsubscriber.FieldUpdatedAt,
		})
	}
	if value, ok := esu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: emailsubscriber.FieldUpdatedAt,
		})
	}
	if value, ok := esu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: emailsubscriber.FieldDeletedAt,
		})
	}
	if value, ok := esu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: emailsubscriber.FieldDeletedAt,
		})
	}
	if value, ok := esu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: emailsubscriber.FieldAppID,
		})
	}
	if value, ok := esu.mutation.EmailAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emailsubscriber.FieldEmailAddress,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, esu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailsubscriber.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EmailSubscriberUpdateOne is the builder for updating a single EmailSubscriber entity.
type EmailSubscriberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailSubscriberMutation
}

// SetCreatedAt sets the "created_at" field.
func (esuo *EmailSubscriberUpdateOne) SetCreatedAt(u uint32) *EmailSubscriberUpdateOne {
	esuo.mutation.ResetCreatedAt()
	esuo.mutation.SetCreatedAt(u)
	return esuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (esuo *EmailSubscriberUpdateOne) SetNillableCreatedAt(u *uint32) *EmailSubscriberUpdateOne {
	if u != nil {
		esuo.SetCreatedAt(*u)
	}
	return esuo
}

// AddCreatedAt adds u to the "created_at" field.
func (esuo *EmailSubscriberUpdateOne) AddCreatedAt(u int32) *EmailSubscriberUpdateOne {
	esuo.mutation.AddCreatedAt(u)
	return esuo
}

// SetUpdatedAt sets the "updated_at" field.
func (esuo *EmailSubscriberUpdateOne) SetUpdatedAt(u uint32) *EmailSubscriberUpdateOne {
	esuo.mutation.ResetUpdatedAt()
	esuo.mutation.SetUpdatedAt(u)
	return esuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (esuo *EmailSubscriberUpdateOne) AddUpdatedAt(u int32) *EmailSubscriberUpdateOne {
	esuo.mutation.AddUpdatedAt(u)
	return esuo
}

// SetDeletedAt sets the "deleted_at" field.
func (esuo *EmailSubscriberUpdateOne) SetDeletedAt(u uint32) *EmailSubscriberUpdateOne {
	esuo.mutation.ResetDeletedAt()
	esuo.mutation.SetDeletedAt(u)
	return esuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (esuo *EmailSubscriberUpdateOne) SetNillableDeletedAt(u *uint32) *EmailSubscriberUpdateOne {
	if u != nil {
		esuo.SetDeletedAt(*u)
	}
	return esuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (esuo *EmailSubscriberUpdateOne) AddDeletedAt(u int32) *EmailSubscriberUpdateOne {
	esuo.mutation.AddDeletedAt(u)
	return esuo
}

// SetAppID sets the "app_id" field.
func (esuo *EmailSubscriberUpdateOne) SetAppID(u uuid.UUID) *EmailSubscriberUpdateOne {
	esuo.mutation.SetAppID(u)
	return esuo
}

// SetEmailAddress sets the "email_address" field.
func (esuo *EmailSubscriberUpdateOne) SetEmailAddress(s string) *EmailSubscriberUpdateOne {
	esuo.mutation.SetEmailAddress(s)
	return esuo
}

// Mutation returns the EmailSubscriberMutation object of the builder.
func (esuo *EmailSubscriberUpdateOne) Mutation() *EmailSubscriberMutation {
	return esuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (esuo *EmailSubscriberUpdateOne) Select(field string, fields ...string) *EmailSubscriberUpdateOne {
	esuo.fields = append([]string{field}, fields...)
	return esuo
}

// Save executes the query and returns the updated EmailSubscriber entity.
func (esuo *EmailSubscriberUpdateOne) Save(ctx context.Context) (*EmailSubscriber, error) {
	var (
		err  error
		node *EmailSubscriber
	)
	if err := esuo.defaults(); err != nil {
		return nil, err
	}
	if len(esuo.hooks) == 0 {
		node, err = esuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailSubscriberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			esuo.mutation = mutation
			node, err = esuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(esuo.hooks) - 1; i >= 0; i-- {
			if esuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = esuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, esuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (esuo *EmailSubscriberUpdateOne) SaveX(ctx context.Context) *EmailSubscriber {
	node, err := esuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (esuo *EmailSubscriberUpdateOne) Exec(ctx context.Context) error {
	_, err := esuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esuo *EmailSubscriberUpdateOne) ExecX(ctx context.Context) {
	if err := esuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esuo *EmailSubscriberUpdateOne) defaults() error {
	if _, ok := esuo.mutation.UpdatedAt(); !ok {
		if emailsubscriber.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized emailsubscriber.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := emailsubscriber.UpdateDefaultUpdatedAt()
		esuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (esuo *EmailSubscriberUpdateOne) sqlSave(ctx context.Context) (_node *EmailSubscriber, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emailsubscriber.Table,
			Columns: emailsubscriber.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: emailsubscriber.FieldID,
			},
		},
	}
	id, ok := esuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmailSubscriber.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := esuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailsubscriber.FieldID)
		for _, f := range fields {
			if !emailsubscriber.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != emailsubscriber.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := esuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: emailsubscriber.FieldCreatedAt,
		})
	}
	if value, ok := esuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: emailsubscriber.FieldCreatedAt,
		})
	}
	if value, ok := esuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: emailsubscriber.FieldUpdatedAt,
		})
	}
	if value, ok := esuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: emailsubscriber.FieldUpdatedAt,
		})
	}
	if value, ok := esuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: emailsubscriber.FieldDeletedAt,
		})
	}
	if value, ok := esuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: emailsubscriber.FieldDeletedAt,
		})
	}
	if value, ok := esuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: emailsubscriber.FieldAppID,
		})
	}
	if value, ok := esuo.mutation.EmailAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emailsubscriber.FieldEmailAddress,
		})
	}
	_node = &EmailSubscriber{config: esuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, esuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailsubscriber.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
