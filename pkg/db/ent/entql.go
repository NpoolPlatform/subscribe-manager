// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/subscribe-manager/pkg/db/ent/emailsubscriber"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   emailsubscriber.Table,
			Columns: emailsubscriber.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: emailsubscriber.FieldID,
			},
		},
		Type: "EmailSubscriber",
		Fields: map[string]*sqlgraph.FieldSpec{
			emailsubscriber.FieldCreatedAt:    {Type: field.TypeUint32, Column: emailsubscriber.FieldCreatedAt},
			emailsubscriber.FieldUpdatedAt:    {Type: field.TypeUint32, Column: emailsubscriber.FieldUpdatedAt},
			emailsubscriber.FieldDeletedAt:    {Type: field.TypeUint32, Column: emailsubscriber.FieldDeletedAt},
			emailsubscriber.FieldAppID:        {Type: field.TypeUUID, Column: emailsubscriber.FieldAppID},
			emailsubscriber.FieldEmailAddress: {Type: field.TypeString, Column: emailsubscriber.FieldEmailAddress},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (esq *EmailSubscriberQuery) addPredicate(pred func(s *sql.Selector)) {
	esq.predicates = append(esq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EmailSubscriberQuery builder.
func (esq *EmailSubscriberQuery) Filter() *EmailSubscriberFilter {
	return &EmailSubscriberFilter{esq}
}

// addPredicate implements the predicateAdder interface.
func (m *EmailSubscriberMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EmailSubscriberMutation builder.
func (m *EmailSubscriberMutation) Filter() *EmailSubscriberFilter {
	return &EmailSubscriberFilter{m}
}

// EmailSubscriberFilter provides a generic filtering capability at runtime for EmailSubscriberQuery.
type EmailSubscriberFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *EmailSubscriberFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *EmailSubscriberFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(emailsubscriber.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *EmailSubscriberFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(emailsubscriber.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *EmailSubscriberFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(emailsubscriber.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *EmailSubscriberFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(emailsubscriber.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *EmailSubscriberFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(emailsubscriber.FieldAppID))
}

// WhereEmailAddress applies the entql string predicate on the email_address field.
func (f *EmailSubscriberFilter) WhereEmailAddress(p entql.StringP) {
	f.Where(p.Field(emailsubscriber.FieldEmailAddress))
}
