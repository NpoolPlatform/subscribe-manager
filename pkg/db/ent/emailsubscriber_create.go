// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/subscribe-manager/pkg/db/ent/emailsubscriber"
	"github.com/google/uuid"
)

// EmailSubscriberCreate is the builder for creating a EmailSubscriber entity.
type EmailSubscriberCreate struct {
	config
	mutation *EmailSubscriberMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (esc *EmailSubscriberCreate) SetCreatedAt(u uint32) *EmailSubscriberCreate {
	esc.mutation.SetCreatedAt(u)
	return esc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (esc *EmailSubscriberCreate) SetNillableCreatedAt(u *uint32) *EmailSubscriberCreate {
	if u != nil {
		esc.SetCreatedAt(*u)
	}
	return esc
}

// SetUpdatedAt sets the "updated_at" field.
func (esc *EmailSubscriberCreate) SetUpdatedAt(u uint32) *EmailSubscriberCreate {
	esc.mutation.SetUpdatedAt(u)
	return esc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (esc *EmailSubscriberCreate) SetNillableUpdatedAt(u *uint32) *EmailSubscriberCreate {
	if u != nil {
		esc.SetUpdatedAt(*u)
	}
	return esc
}

// SetDeletedAt sets the "deleted_at" field.
func (esc *EmailSubscriberCreate) SetDeletedAt(u uint32) *EmailSubscriberCreate {
	esc.mutation.SetDeletedAt(u)
	return esc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (esc *EmailSubscriberCreate) SetNillableDeletedAt(u *uint32) *EmailSubscriberCreate {
	if u != nil {
		esc.SetDeletedAt(*u)
	}
	return esc
}

// SetAppID sets the "app_id" field.
func (esc *EmailSubscriberCreate) SetAppID(u uuid.UUID) *EmailSubscriberCreate {
	esc.mutation.SetAppID(u)
	return esc
}

// SetEmailAddress sets the "email_address" field.
func (esc *EmailSubscriberCreate) SetEmailAddress(s string) *EmailSubscriberCreate {
	esc.mutation.SetEmailAddress(s)
	return esc
}

// SetID sets the "id" field.
func (esc *EmailSubscriberCreate) SetID(u uuid.UUID) *EmailSubscriberCreate {
	esc.mutation.SetID(u)
	return esc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (esc *EmailSubscriberCreate) SetNillableID(u *uuid.UUID) *EmailSubscriberCreate {
	if u != nil {
		esc.SetID(*u)
	}
	return esc
}

// Mutation returns the EmailSubscriberMutation object of the builder.
func (esc *EmailSubscriberCreate) Mutation() *EmailSubscriberMutation {
	return esc.mutation
}

// Save creates the EmailSubscriber in the database.
func (esc *EmailSubscriberCreate) Save(ctx context.Context) (*EmailSubscriber, error) {
	var (
		err  error
		node *EmailSubscriber
	)
	if err := esc.defaults(); err != nil {
		return nil, err
	}
	if len(esc.hooks) == 0 {
		if err = esc.check(); err != nil {
			return nil, err
		}
		node, err = esc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailSubscriberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = esc.check(); err != nil {
				return nil, err
			}
			esc.mutation = mutation
			if node, err = esc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(esc.hooks) - 1; i >= 0; i-- {
			if esc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = esc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, esc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (esc *EmailSubscriberCreate) SaveX(ctx context.Context) *EmailSubscriber {
	v, err := esc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (esc *EmailSubscriberCreate) Exec(ctx context.Context) error {
	_, err := esc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esc *EmailSubscriberCreate) ExecX(ctx context.Context) {
	if err := esc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esc *EmailSubscriberCreate) defaults() error {
	if _, ok := esc.mutation.CreatedAt(); !ok {
		if emailsubscriber.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized emailsubscriber.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := emailsubscriber.DefaultCreatedAt()
		esc.mutation.SetCreatedAt(v)
	}
	if _, ok := esc.mutation.UpdatedAt(); !ok {
		if emailsubscriber.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized emailsubscriber.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := emailsubscriber.DefaultUpdatedAt()
		esc.mutation.SetUpdatedAt(v)
	}
	if _, ok := esc.mutation.DeletedAt(); !ok {
		if emailsubscriber.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized emailsubscriber.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := emailsubscriber.DefaultDeletedAt()
		esc.mutation.SetDeletedAt(v)
	}
	if _, ok := esc.mutation.ID(); !ok {
		if emailsubscriber.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized emailsubscriber.DefaultID (forgotten import ent/runtime?)")
		}
		v := emailsubscriber.DefaultID()
		esc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (esc *EmailSubscriberCreate) check() error {
	if _, ok := esc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EmailSubscriber.created_at"`)}
	}
	if _, ok := esc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EmailSubscriber.updated_at"`)}
	}
	if _, ok := esc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "EmailSubscriber.deleted_at"`)}
	}
	if _, ok := esc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "EmailSubscriber.app_id"`)}
	}
	if _, ok := esc.mutation.EmailAddress(); !ok {
		return &ValidationError{Name: "email_address", err: errors.New(`ent: missing required field "EmailSubscriber.email_address"`)}
	}
	return nil
}

func (esc *EmailSubscriberCreate) sqlSave(ctx context.Context) (*EmailSubscriber, error) {
	_node, _spec := esc.createSpec()
	if err := sqlgraph.CreateNode(ctx, esc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (esc *EmailSubscriberCreate) createSpec() (*EmailSubscriber, *sqlgraph.CreateSpec) {
	var (
		_node = &EmailSubscriber{config: esc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: emailsubscriber.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: emailsubscriber.FieldID,
			},
		}
	)
	_spec.OnConflict = esc.conflict
	if id, ok := esc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := esc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: emailsubscriber.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := esc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: emailsubscriber.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := esc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: emailsubscriber.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := esc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: emailsubscriber.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := esc.mutation.EmailAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emailsubscriber.FieldEmailAddress,
		})
		_node.EmailAddress = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EmailSubscriber.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EmailSubscriberUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (esc *EmailSubscriberCreate) OnConflict(opts ...sql.ConflictOption) *EmailSubscriberUpsertOne {
	esc.conflict = opts
	return &EmailSubscriberUpsertOne{
		create: esc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EmailSubscriber.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (esc *EmailSubscriberCreate) OnConflictColumns(columns ...string) *EmailSubscriberUpsertOne {
	esc.conflict = append(esc.conflict, sql.ConflictColumns(columns...))
	return &EmailSubscriberUpsertOne{
		create: esc,
	}
}

type (
	// EmailSubscriberUpsertOne is the builder for "upsert"-ing
	//  one EmailSubscriber node.
	EmailSubscriberUpsertOne struct {
		create *EmailSubscriberCreate
	}

	// EmailSubscriberUpsert is the "OnConflict" setter.
	EmailSubscriberUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *EmailSubscriberUpsert) SetCreatedAt(v uint32) *EmailSubscriberUpsert {
	u.Set(emailsubscriber.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EmailSubscriberUpsert) UpdateCreatedAt() *EmailSubscriberUpsert {
	u.SetExcluded(emailsubscriber.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *EmailSubscriberUpsert) AddCreatedAt(v uint32) *EmailSubscriberUpsert {
	u.Add(emailsubscriber.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EmailSubscriberUpsert) SetUpdatedAt(v uint32) *EmailSubscriberUpsert {
	u.Set(emailsubscriber.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EmailSubscriberUpsert) UpdateUpdatedAt() *EmailSubscriberUpsert {
	u.SetExcluded(emailsubscriber.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *EmailSubscriberUpsert) AddUpdatedAt(v uint32) *EmailSubscriberUpsert {
	u.Add(emailsubscriber.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EmailSubscriberUpsert) SetDeletedAt(v uint32) *EmailSubscriberUpsert {
	u.Set(emailsubscriber.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EmailSubscriberUpsert) UpdateDeletedAt() *EmailSubscriberUpsert {
	u.SetExcluded(emailsubscriber.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *EmailSubscriberUpsert) AddDeletedAt(v uint32) *EmailSubscriberUpsert {
	u.Add(emailsubscriber.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *EmailSubscriberUpsert) SetAppID(v uuid.UUID) *EmailSubscriberUpsert {
	u.Set(emailsubscriber.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *EmailSubscriberUpsert) UpdateAppID() *EmailSubscriberUpsert {
	u.SetExcluded(emailsubscriber.FieldAppID)
	return u
}

// SetEmailAddress sets the "email_address" field.
func (u *EmailSubscriberUpsert) SetEmailAddress(v string) *EmailSubscriberUpsert {
	u.Set(emailsubscriber.FieldEmailAddress, v)
	return u
}

// UpdateEmailAddress sets the "email_address" field to the value that was provided on create.
func (u *EmailSubscriberUpsert) UpdateEmailAddress() *EmailSubscriberUpsert {
	u.SetExcluded(emailsubscriber.FieldEmailAddress)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.EmailSubscriber.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(emailsubscriber.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *EmailSubscriberUpsertOne) UpdateNewValues() *EmailSubscriberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(emailsubscriber.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.EmailSubscriber.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *EmailSubscriberUpsertOne) Ignore() *EmailSubscriberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EmailSubscriberUpsertOne) DoNothing() *EmailSubscriberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EmailSubscriberCreate.OnConflict
// documentation for more info.
func (u *EmailSubscriberUpsertOne) Update(set func(*EmailSubscriberUpsert)) *EmailSubscriberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EmailSubscriberUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *EmailSubscriberUpsertOne) SetCreatedAt(v uint32) *EmailSubscriberUpsertOne {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *EmailSubscriberUpsertOne) AddCreatedAt(v uint32) *EmailSubscriberUpsertOne {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EmailSubscriberUpsertOne) UpdateCreatedAt() *EmailSubscriberUpsertOne {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EmailSubscriberUpsertOne) SetUpdatedAt(v uint32) *EmailSubscriberUpsertOne {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *EmailSubscriberUpsertOne) AddUpdatedAt(v uint32) *EmailSubscriberUpsertOne {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EmailSubscriberUpsertOne) UpdateUpdatedAt() *EmailSubscriberUpsertOne {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EmailSubscriberUpsertOne) SetDeletedAt(v uint32) *EmailSubscriberUpsertOne {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *EmailSubscriberUpsertOne) AddDeletedAt(v uint32) *EmailSubscriberUpsertOne {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EmailSubscriberUpsertOne) UpdateDeletedAt() *EmailSubscriberUpsertOne {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *EmailSubscriberUpsertOne) SetAppID(v uuid.UUID) *EmailSubscriberUpsertOne {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *EmailSubscriberUpsertOne) UpdateAppID() *EmailSubscriberUpsertOne {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.UpdateAppID()
	})
}

// SetEmailAddress sets the "email_address" field.
func (u *EmailSubscriberUpsertOne) SetEmailAddress(v string) *EmailSubscriberUpsertOne {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.SetEmailAddress(v)
	})
}

// UpdateEmailAddress sets the "email_address" field to the value that was provided on create.
func (u *EmailSubscriberUpsertOne) UpdateEmailAddress() *EmailSubscriberUpsertOne {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.UpdateEmailAddress()
	})
}

// Exec executes the query.
func (u *EmailSubscriberUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EmailSubscriberCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EmailSubscriberUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EmailSubscriberUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: EmailSubscriberUpsertOne.ID is not supported by MySQL driver. Use EmailSubscriberUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EmailSubscriberUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EmailSubscriberCreateBulk is the builder for creating many EmailSubscriber entities in bulk.
type EmailSubscriberCreateBulk struct {
	config
	builders []*EmailSubscriberCreate
	conflict []sql.ConflictOption
}

// Save creates the EmailSubscriber entities in the database.
func (escb *EmailSubscriberCreateBulk) Save(ctx context.Context) ([]*EmailSubscriber, error) {
	specs := make([]*sqlgraph.CreateSpec, len(escb.builders))
	nodes := make([]*EmailSubscriber, len(escb.builders))
	mutators := make([]Mutator, len(escb.builders))
	for i := range escb.builders {
		func(i int, root context.Context) {
			builder := escb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmailSubscriberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, escb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = escb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, escb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, escb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (escb *EmailSubscriberCreateBulk) SaveX(ctx context.Context) []*EmailSubscriber {
	v, err := escb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (escb *EmailSubscriberCreateBulk) Exec(ctx context.Context) error {
	_, err := escb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (escb *EmailSubscriberCreateBulk) ExecX(ctx context.Context) {
	if err := escb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EmailSubscriber.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EmailSubscriberUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (escb *EmailSubscriberCreateBulk) OnConflict(opts ...sql.ConflictOption) *EmailSubscriberUpsertBulk {
	escb.conflict = opts
	return &EmailSubscriberUpsertBulk{
		create: escb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EmailSubscriber.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (escb *EmailSubscriberCreateBulk) OnConflictColumns(columns ...string) *EmailSubscriberUpsertBulk {
	escb.conflict = append(escb.conflict, sql.ConflictColumns(columns...))
	return &EmailSubscriberUpsertBulk{
		create: escb,
	}
}

// EmailSubscriberUpsertBulk is the builder for "upsert"-ing
// a bulk of EmailSubscriber nodes.
type EmailSubscriberUpsertBulk struct {
	create *EmailSubscriberCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EmailSubscriber.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(emailsubscriber.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *EmailSubscriberUpsertBulk) UpdateNewValues() *EmailSubscriberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(emailsubscriber.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EmailSubscriber.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *EmailSubscriberUpsertBulk) Ignore() *EmailSubscriberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EmailSubscriberUpsertBulk) DoNothing() *EmailSubscriberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EmailSubscriberCreateBulk.OnConflict
// documentation for more info.
func (u *EmailSubscriberUpsertBulk) Update(set func(*EmailSubscriberUpsert)) *EmailSubscriberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EmailSubscriberUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *EmailSubscriberUpsertBulk) SetCreatedAt(v uint32) *EmailSubscriberUpsertBulk {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *EmailSubscriberUpsertBulk) AddCreatedAt(v uint32) *EmailSubscriberUpsertBulk {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EmailSubscriberUpsertBulk) UpdateCreatedAt() *EmailSubscriberUpsertBulk {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EmailSubscriberUpsertBulk) SetUpdatedAt(v uint32) *EmailSubscriberUpsertBulk {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *EmailSubscriberUpsertBulk) AddUpdatedAt(v uint32) *EmailSubscriberUpsertBulk {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EmailSubscriberUpsertBulk) UpdateUpdatedAt() *EmailSubscriberUpsertBulk {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EmailSubscriberUpsertBulk) SetDeletedAt(v uint32) *EmailSubscriberUpsertBulk {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *EmailSubscriberUpsertBulk) AddDeletedAt(v uint32) *EmailSubscriberUpsertBulk {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EmailSubscriberUpsertBulk) UpdateDeletedAt() *EmailSubscriberUpsertBulk {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *EmailSubscriberUpsertBulk) SetAppID(v uuid.UUID) *EmailSubscriberUpsertBulk {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *EmailSubscriberUpsertBulk) UpdateAppID() *EmailSubscriberUpsertBulk {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.UpdateAppID()
	})
}

// SetEmailAddress sets the "email_address" field.
func (u *EmailSubscriberUpsertBulk) SetEmailAddress(v string) *EmailSubscriberUpsertBulk {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.SetEmailAddress(v)
	})
}

// UpdateEmailAddress sets the "email_address" field to the value that was provided on create.
func (u *EmailSubscriberUpsertBulk) UpdateEmailAddress() *EmailSubscriberUpsertBulk {
	return u.Update(func(s *EmailSubscriberUpsert) {
		s.UpdateEmailAddress()
	})
}

// Exec executes the query.
func (u *EmailSubscriberUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EmailSubscriberCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EmailSubscriberCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EmailSubscriberUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
